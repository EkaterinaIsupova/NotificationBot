import telebot
from telebot import types
from config import load_configuration
from TODO import *

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = './config.ini'
try:
    config_data = load_configuration(config_path)
    admins = set(config_data['admins'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    print("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", config_data['token'])
    print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:", config_data['admins'])
    bot = telebot.TeleBot(config_data['token'])
except Exception as e:
    print("–û—à–∏–±–∫–∞:", str(e))
    exit(1)


# –î–ï–ö–û–†–ê–¢–û–† ADMIN ONLY COMMAND
def admin_required(func):
    def wrapped(message):
        user_username = message.from_user.username
        if not(user_username in admins or '@' + user_username in admins):
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        return func(message)

    return wrapped


@bot.message_handler(commands=['start'])
def handle_start(message):
    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    user_username = message.from_user.username
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"

    if user_username:
        welcome_text += f" –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥: @{user_username}."
        if user_username in admins or '@' + user_username in admins:
            welcome_text += " –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        else:
            welcome_text += " –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
    else:
        welcome_text += " –í–Ω–∏–º–∞–Ω–∏–µ: —É –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(commands=['listme'])
def list_events_for_user(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tag = message.from_user.username
    if not user_tag:
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–≥–∞ (username), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏ –¥–µ–¥–ª–∞–π–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    events = get_event_list_for_user(user_tag)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not events:
        bot.send_message(message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ.")
        return

    response_message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n"
    for event_name, deadlines in events.items():
        response_message += f"\nüìÖ {event_name}:\n"
        for deadline_name, deadline_time in deadlines.items():
            response_message += f"   - {deadline_name}: {deadline_time}\n"

    bot.send_message(message.chat.id, response_message)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
user_data = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_step(user_tag):
    if user_tag in user_data:
        return user_data[user_tag]['step']
    else:
        return "AWAITING_COMMAND"



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(commands=['newevent'])
@admin_required
def new_event(message):
    user_tag = message.from_user.username
    if user_tag not in user_data:
        user_data[user_tag] = {'step': None, 'file_id': None, 'event_name': None}
    markup = types.ForceReply(selective=False)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=markup)
    user_data[user_tag]['step'] = "AWAITING_FILE"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@bot.message_handler(func=lambda message: get_user_step(message.from_user.username) == "AWAITING_FILE", content_types=['document'])
def handle_document(message):
    user_tag = message.from_user.username
    file_name = message.document.file_name
    if not (file_name.endswith('.xls') or file_name.endswith('.xlsx')):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.")
        return
    user_data[user_tag]['file_id'] = message.document.file_id
    user_data[user_tag]['step'] = "AWAITING_EVENT_NAME"
    bot.send_message(message.chat.id, "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(func=lambda message: get_user_step(message.from_user.username) == "AWAITING_EVENT_NAME")
def event_name_received(message):
    user_tag = message.from_user.username
    event_name = message.text
    #TODO –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –†–ê–ë–û–¢–ê –° –ë–î
    user_data[user_tag]['event_name'] = event_name
    user_data[user_tag]['step'] = "AWAITING_COMMANDS"
    bot.send_message(message.chat.id, f"–°–æ–±—ã—Ç–∏–µ '{event_name}' —Å–æ–∑–¥–∞–Ω–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–µ–º.")


